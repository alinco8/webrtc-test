{"version":3,"file":"bundle.js","mappings":"mBAAA,MAAMA,EACFC,kBACAC,QACAC,UAAY,GACZC,YACAC,cAAgB,CAChBC,+BACUC,KAAKC,eAAe,CAAEC,OAAO,EAAMC,OAAO,IAChDH,KAAKN,kBAAoB,IAAIU,kBAAkB,CAC3CC,WAAY,CACR,CACIC,KAAM,mCAIlBN,KAAKL,QAAUK,KAAKN,kBAAkBa,kBAAkB,WACxDP,KAAKL,QAAQa,iBAAiB,WAAYC,IACtCC,QAAQC,IAAIF,EAAEG,KAAK,IAEvBZ,KAAKL,QAAQa,iBAAiB,QAASC,IACnCC,QAAQC,IAAI,iBAAiB,IAEjCX,KAAKL,QAAQa,iBAAiB,SAAUC,IACpCC,QAAQC,IAAI,iBAAiB,IAEjCX,KAAKN,kBAAkBc,iBAAiB,gBAAiBC,IACjDA,EAAEb,WACFI,KAAKJ,UAAUiB,KAAKJ,EAAEb,UAC1B,IAEJI,KAAKN,kBAAkBc,iBAAiB,SAAUC,IAC9CK,SAASC,eAAe,SAASC,UAAYP,EAAEQ,QAAQ,EAAE,IAE7DjB,KAAKH,YAAYqB,YAAYC,SAASC,IAClCpB,KAAKN,kBAAkB2B,SAASD,EAAOpB,KAAKH,YAAY,IAE5Da,QAAQC,IAAI,qBAChB,CACAZ,qBAAqBuB,GACjBtB,KAAKH,kBAAoB0B,UAAUC,aAAaC,aAAaH,EACjE,CACAvB,0BAA0BH,GACH8B,KAAKC,MAAM/B,GACnBuB,SAASvB,IAChBI,KAAKN,kBAAkBkC,gBAAgBhC,EAAU,GAEzD,EC5CJiC,OAAOC,UAAY,ID8CnB,cAAwBrC,EACpBsC,MACAC,aACAlC,cACImC,OACJ,CACAlC,oBACIC,KAAK+B,YAAc/B,KAAKN,kBAAkBwC,cAC1ClC,KAAKN,kBAAkByC,oBAAoBnC,KAAK+B,MACpD,CACAhC,oBAAoBqC,GAChBpC,KAAKN,kBAAkB2C,qBAAqBX,KAAKC,MAAMS,GAC3D,GCzDJP,OAAOS,YAAc,ID2DrB,cAA0B7C,EACtB2C,OACAtC,cACImC,OACJ,CACAlC,mBAAmBgC,SACT/B,KAAKN,kBAAkB2C,qBAAqBX,KAAKC,MAAMI,IAC7D/B,KAAKoC,aAAepC,KAAKN,kBAAkB6C,eAC3CvC,KAAKN,kBAAkByC,oBAAoBnC,KAAKoC,OACpD,E","sources":["webpack://webrtc-test/./src/funcs.ts","webpack://webrtc-test/./src/index.ts"],"sourcesContent":["class RTCStatic {\n    rtcPeerConnection;\n    channel;\n    candidate = [];\n    localStream;\n    constructor() { }\n    async createConnection() {\n        await this.setLocalStream({ video: true, audio: false });\n        this.rtcPeerConnection = new RTCPeerConnection({\n            iceServers: [\n                {\n                    urls: 'stun:stun.l.google.com:19302',\n                },\n            ],\n        });\n        this.channel = this.rtcPeerConnection.createDataChannel('channel');\n        this.channel.addEventListener('message', (e) => {\n            console.log(e.data);\n        });\n        this.channel.addEventListener('open', (e) => {\n            console.log('channel opened');\n        });\n        this.channel.addEventListener('close', (e) => {\n            console.log('channel closed');\n        });\n        this.rtcPeerConnection.addEventListener('icecandidate', (e) => {\n            if (e.candidate) {\n                this.candidate.push(e.candidate);\n            }\n        });\n        this.rtcPeerConnection.addEventListener('track', (e) => {\n            document.getElementById('local').srcObject = e.streams[0];\n        });\n        this.localStream.getTracks().forEach((track) => {\n            this.rtcPeerConnection.addTrack(track, this.localStream);\n        });\n        console.log('connection created');\n    }\n    async setLocalStream(config) {\n        this.localStream = await navigator.mediaDevices.getUserMedia(config);\n    }\n    async receiveIceCandidate(candidate) {\n        const candidates = JSON.parse(candidate);\n        candidates.forEach((candidate) => {\n            this.rtcPeerConnection.addIceCandidate(candidate);\n        });\n    }\n}\nclass RTCSender extends RTCStatic {\n    offer;\n    remoteStream;\n    constructor() {\n        super();\n    }\n    async createOffer() {\n        this.offer = await this.rtcPeerConnection.createOffer();\n        this.rtcPeerConnection.setLocalDescription(this.offer);\n    }\n    async receiveAnswer(answer) {\n        this.rtcPeerConnection.setRemoteDescription(JSON.parse(answer));\n    }\n}\nclass RTCReceiver extends RTCStatic {\n    answer;\n    constructor() {\n        super();\n    }\n    async receiveOffer(offer) {\n        await this.rtcPeerConnection.setRemoteDescription(JSON.parse(offer));\n        this.answer = await this.rtcPeerConnection.createAnswer();\n        this.rtcPeerConnection.setLocalDescription(this.answer);\n    }\n}\nexport { RTCSender, RTCReceiver, RTCStatic };\n","import { RTCSender, RTCReceiver } from './funcs';\nimport './style.scss';\nwindow.RTCSender = new RTCSender();\nwindow.RTCReceiver = new RTCReceiver();\n"],"names":["RTCStatic","rtcPeerConnection","channel","candidate","localStream","constructor","async","this","setLocalStream","video","audio","RTCPeerConnection","iceServers","urls","createDataChannel","addEventListener","e","console","log","data","push","document","getElementById","srcObject","streams","getTracks","forEach","track","addTrack","config","navigator","mediaDevices","getUserMedia","JSON","parse","addIceCandidate","window","RTCSender","offer","remoteStream","super","createOffer","setLocalDescription","answer","setRemoteDescription","RTCReceiver","createAnswer"],"sourceRoot":""}